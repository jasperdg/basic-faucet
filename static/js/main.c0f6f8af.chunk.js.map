{"version":3,"sources":["constants.js","App.js","serviceWorker.js","index.js"],"names":["TOKEN_CHANGE_METHODS","TOKEN_VIEW_METHODS","FAUCET_CHANGE_METHODS","FAUCET_VIEW_METHODS","TESTNET_NETWORK_CONFIG","networkId","nodeUrl","contractName","walletUrl","initialBalance","PREPAID_GAS","BN","ZERO","App","useState","walletConnection","setWalletConnection","near","setNear","faucetBalance","setFaucetBalance","userBalance","setUserBalance","faucetContract","setFaucetContract","useEffect","connect","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","then","connection","walletInstance","WalletConnection","tokenContract","Contract","account","viewMethods","changeMethods","faucetContractInstance","get_balance","owner_id","balance","getAccountId","className","onClick","signOut","window","location","reload","requestSignIn","claim","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oQAMaA,G,OAAuB,IACvBC,EAAqB,CAAC,eAEtBC,EAAwB,CAAC,SACzBC,EAAsB,GAErBC,EAAyB,CACnCC,UAAW,UACXC,QAAS,+BACTC,aAAc,KACdC,UAAW,kCACXC,eAAgB,K,iBCXdC,EAAc,IAAIC,IAAG,mBACrBC,EAAO,IAAID,IAAG,KAoELE,MAlEf,WAAgB,IAAD,EACmCC,mBAAS,MAD5C,mBACNC,EADM,KACYC,EADZ,OAEWF,mBAAS,MAFpB,mBAENG,EAFM,KAEAC,EAFA,OAG6BJ,mBAAS,cAHtC,mBAGNK,EAHM,KAGSC,EAHT,OAIyBN,mBAAS,cAJlC,mBAINO,EAJM,KAIOC,EAJP,OAK+BR,oBAAS,eALxC,mBAKNS,EALM,KAKUC,EALV,KAsCb,OAhCAC,qBAAU,WACRC,kBAAQ,2BAAItB,GAAL,IAA6BuB,KAAM,CAACC,SAAU,IAAIC,YAAUC,gCAClEC,MAAK,SAAAC,GACJ,IAAMC,EAAiB,IAAIC,mBAAiBF,EDhBrB,0BCkBjBG,EAAgB,IAAIC,WAASH,EAAeI,UDnB3B,2BCmBqD,CAC1EC,YAAarC,EACbsC,cAAevC,IAGXwC,EAAyB,IAAIJ,WAASH,EAAeI,UDzBnC,uBCyB8D,CACpFC,YAAanC,EACboC,cAAerC,IAGjBsB,EAAkBgB,GAElBL,EAAcM,YAAY,CAACC,SDhCH,yBCgC8BX,MAAK,SAAAY,GACzDvB,EAAiBuB,MAGfV,EAAeW,gBACjBT,EAAcM,YAAY,CAACC,SAAUT,EAAeW,iBAAiBb,MAAK,SAAAY,GACxErB,EAAeqB,MAInB3B,EAAoBiB,GACpBf,EAAQc,QAET,IAGD,yBAAKa,UAAU,OAEX5B,GAAQ,6BACJF,GAAqBA,EAAiB6B,eACtC,oCACE,qCAAW7B,EAAiB6B,gBAC5B,4BAAQE,QAAS,WAAO/B,EAAiBgC,UAAWC,OAAOC,SAASC,WAApE,aAEA,4BAAQJ,QAAU,kBAAM/B,EAAiBoC,cDtD1B,yBCsDuD,YAAtE,WACJ,gDAAuBhC,EAAvB,KAEEJ,GAAqBA,EAAiB6B,gBAAkB,6BACtD,8CAAqBvB,EAArB,KACA,4BAAQyB,QAAS,WACfvB,EAAe6B,MAAM,GAAI1C,EAAaE,GAAMmB,MAAK,WAC/CiB,OAAOC,SAASC,cAFpB,eCjDMG,QACW,cAA7BL,OAAOC,SAASK,UAEe,UAA7BN,OAAOC,SAASK,UAEhBN,OAAOC,SAASK,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c0f6f8af.chunk.js","sourcesContent":["export const FAUCET_ADDRESS = \"demo_faucet.flux-dev\";\nexport const TOKEN_ADDRESS = \"flux_fun_token2.flux-dev\";\nexport const NULL_CONTRACT = 'null_contract.flux-dev';\n\nexport const NETWORK = \"testnet\";\n\nexport const TOKEN_CHANGE_METHODS = [];\nexport const TOKEN_VIEW_METHODS = [\"get_balance\"];\n\nexport const FAUCET_CHANGE_METHODS = [\"claim\"];\nexport const FAUCET_VIEW_METHODS = [];\n\nexport const  TESTNET_NETWORK_CONFIG = {\n    networkId: 'testnet',\n    nodeUrl: 'https://rpc.testnet.near.org',\n    contractName: null,\n    walletUrl: 'https://wallet.testnet.near.org',\n    initialBalance: 100000000\n};","import React, { useEffect, useState } from 'react';\nimport { connect, WalletConnection, Contract, keyStores } from 'near-api-js';\nimport './App.css';\nimport { TESTNET_NETWORK_CONFIG, NULL_CONTRACT, TOKEN_ADDRESS, TOKEN_VIEW_METHODS, TOKEN_CHANGE_METHODS, FAUCET_ADDRESS, FAUCET_VIEW_METHODS, FAUCET_CHANGE_METHODS } from './constants';\nimport BN from 'bn.js';\n\nconst PREPAID_GAS = new BN(\"150000000000000\");\nconst ZERO = new BN(\"0\");\n\nfunction App() {\n  const [walletConnection, setWalletConnection] = useState(null)\n  const [near, setNear] = useState(null);\n  const [faucetBalance, setFaucetBalance] = useState(\"loading...\");\n  const [userBalance, setUserBalance] = useState(\"loading...\");\n  const [faucetContract, setFaucetContract] = useState(() => {});\n  useEffect(() => {  \n    connect({...TESTNET_NETWORK_CONFIG, deps: {keyStore: new keyStores.BrowserLocalStorageKeyStore}})\n    .then(connection => {\n      const walletInstance = new WalletConnection(connection, NULL_CONTRACT);\n\n      const tokenContract = new Contract(walletInstance.account(), TOKEN_ADDRESS, {\n        viewMethods: TOKEN_VIEW_METHODS,\n        changeMethods: TOKEN_CHANGE_METHODS,\n      });\n      \n      const faucetContractInstance = new Contract(walletInstance.account(), FAUCET_ADDRESS, {\n        viewMethods: FAUCET_VIEW_METHODS,\n        changeMethods: FAUCET_CHANGE_METHODS,\n      });\n\n      setFaucetContract(faucetContractInstance);\n\n      tokenContract.get_balance({owner_id: FAUCET_ADDRESS}).then(balance => {\n        setFaucetBalance(balance)\n      });\n      \n      if (walletInstance.getAccountId()) {\n        tokenContract.get_balance({owner_id: walletInstance.getAccountId()}).then(balance => {\n          setUserBalance(balance)\n        });\n      }\n      \n      setWalletConnection(walletInstance)\n      setNear(connection)\n    });\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {\n        near && <div> \n          { walletConnection &&  walletConnection.getAccountId() ? \n            <> \n              <div> Hi, {walletConnection.getAccountId()}</div> \n              <button onClick={() => {walletConnection.signOut(); window.location.reload()}}>Sign out</button> \n            </> \n            : <button onClick={ () => walletConnection.requestSignIn(NULL_CONTRACT, \"faucet\") }>Sign in</button> }\n          <div>Faucet balance: { faucetBalance } </div>\n\n          { walletConnection &&  walletConnection.getAccountId() && <div>\n              <div>User balance: { userBalance } </div>\n              <button onClick={() => {\n                faucetContract.claim({}, PREPAID_GAS, ZERO).then(() => {\n                  window.location.reload();\n                })\n              }}> claim </button>\n          </div> }\n\n        </div>\n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}